# Psych package
install.packages("psych")
library(psych)
library(dplyr)
# Define the variables
units <- seq(0, 80000, by = 1000)  # Range of units (0 to 80000 by 1000)
fixed_cost <- 50000  # Initial fixed cost
additional_fixed_cost <- 50000  # Additional fixed cost after 30000 units
variable_cost_per_unit <- 5
revenue_per_unit <- 7.5
# Calculate total costs
total_cost_initial <- fixed_cost + variable_cost_per_unit * units
total_cost_additional <- (fixed_cost + additional_fixed_cost) + variable_cost_per_unit * units
# Calculate total revenue
total_revenue <- revenue_per_unit * units
# Create a data frame
data <- data.frame(units, total_cost_initial, total_cost_additional, total_revenue)
# Create the break-even chart using ggplot
break_even_plot <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
annotate("text", x = 25000, y = 60000, label = "Break-Even Point (20000 units)", vjust = -0.5) +
annotate("text", x = 65000, y = 30000, label = "Break-Even Point (60000 units)", vjust = -0.5) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal()
# Create the break-even chart using ggplot
library(ggplot2)
break_even_plot <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
annotate("text", x = 25000, y = 60000, label = "Break-Even Point (20000 units)", vjust = -0.5) +
annotate("text", x = 65000, y = 30000, label = "Break-Even Point (60000 units)", vjust = -0.5) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal()
# Display the break-even chart
break_even_plot
break_even_plot <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 40000, linetype = "dashed", color = "gray", size = 1) +
annotate("text", x = 25000, y = 60000, label = "Break-Even Point (20000 units)", vjust = -0.5) +
annotate("text", x = 65000, y = 30000, label = "Break-Even Point (40000 units)", vjust = -0.5) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal()
# Display the break-even chart
break_even_plot
# Create the break-even chart using ggplot with non-scientific number formatting
break_even_plot1 <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
annotate("text", x = 25000, y = 60000, label = "Break-Even Point (20000 units)", vjust = -0.5) +
annotate("text", x = 65000, y = 30000, label = "Break-Even Point (60000 units)", vjust = -0.5) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart
break_even_plot1
# Create the break-even chart using ggplot with non-scientific number formatting
break_even_plot1 <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart
break_even_plot1
# Create the break-even chart using ggplot with non-scientific number formatting
break_even_plot1 <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1.5) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1.5) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart
break_even_plot1
# Create the break-even chart using ggplot with non-scientific number formatting
break_even_plot1 <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart
break_even_plot1
# Create the break-even chart using ggplot with non-scientific number formatting
break_even_plot1 <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)"), size=1.5) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart
break_even_plot1
# Create the break-even chart using ggplot with non-scientific number formatting
break_even_plot1 <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)"), size=1.2) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart
break_even_plot1
# Create the break-even chart using ggplot with non-scientific number formatting
break_even_plot1 <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)"), size=1.1) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart
break_even_plot1
# Create the break-even chart using ggplot with non-scientific number formatting
break_even_plot1 <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)"), size=1.1) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)"), size=1.1) +
geom_line(aes(y = total_revenue, color = "Total Revenue"), size=1.1) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 60000, linetype = "dashed", color = "gray", size = 1) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart
break_even_plot1
# Create the break-even chart using ggplot with non-scientific number formatting and point dots
break_even_plot <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 40000, linetype = "dashed", color = "gray", size = 1) +
geom_point(data = data.frame(units = c(20000, 40000),
values = c(total_cost_initial[units == 20000], total_cost_additional[units == 60000])),
aes(x = units, y = values), color = "red", size = 3, shape = 19) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart with point dots
break_even_plot
# Create the break-even chart using ggplot with non-scientific number formatting and point dots
break_even_plot <- ggplot(data, aes(x = units)) +
geom_line(aes(y = total_cost_initial, color = "Total Cost (Up to 30000 units)")) +
geom_line(aes(y = total_cost_additional, color = "Total Cost (After 30000 units)")) +
geom_line(aes(y = total_revenue, color = "Total Revenue")) +
geom_vline(xintercept = 20000, linetype = "dashed", color = "gray", size = 1) +
geom_vline(xintercept = 40000, linetype = "dashed", color = "gray", size = 1) +
geom_point(data = data.frame(units = c(20000, 40000),
values = c(total_cost_initial[units == 20000], total_cost_additional[units == 40000])),
aes(x = units, y = values), color = "red", size = 3, shape = 19) +
labs(
title = "Break-Even Chart",
x = "Number of Units",
y = "Amount (GHS)",
color = "Legend"
) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)  # Format y-axis labels with commas
# Display the break-even chart with point dots
break_even_plot
log(9)
log10(9)
log10(9)
DAT -> read.csv(C:/Users/jason/OneDrive/Desktop/cor_hwk_data.CSV)
DAT -> read.csv(C:\Users\jason\OneDrive\Desktop\cor_hwk_data.CSV)
DAT -> read.csv(\Users\jason\OneDrive\Desktop\cor_hwk_data.CSV)
DAT -> read.csv(file = "\Users\jason\OneDrive\Desktop\cor_hwk_data.CSV")
DAT -> read.csv(file = "/Users/jason/OneDrive/Desktop/cor_hwk_data.CSV")
DAT <- read.csv(file = "/Users/jason/OneDrive/Desktop/cor_hwk_data.CSV")
cor.test(DAT$GPA, DAT$ACT, method = "spearman")
cor.test(DAT$GPA, DAT$ACT, method = "pearson")
class(DAT$GPA)
class(DAT$ACT)
View(DAT)
cor(DAT$GPA, DAT$ACT, method = "spearman")
A <- c(1,2,6,9,15, 43, 50, 23, 60,55)
B<- c(1.2, 1.5, 1.9, 2.5, 5.5, 2.2, 2.1, 3.3, 7.0, 5.2)
cor.test(A, B, method = "spearman")
cor.test(DAT$GPA, DAT$ACT, method = "spearman")
cor.test(A, B, method = "pearson")
MEAN <- function(x){
mean = mean(x)
return(mean)
}
x<-c(2,3,4,5)
MEAN(x)
2+3+4+5
14/4
prop.test(x=19.6, n=5, conf.level = 0.9)
prop.test(x=19.6*5, n=5, conf.level = 0.9)
prop.test(x=0.196*5, n=5, conf.level = 0.9)
?prop.test
prop.test(x=1, n=5, conf.level = 0.9)
prop.test(x=0.196*5, n=5, conf.level = 0.9, correct = FALSE)
sum(dbinom(0:4, 4, 1/3))
1-pnorm(1.37)
?dnorm
dnorm(12)
1-sum(dnorm(0:1.37))
?qnorm
qnorm(0.9147)
qnorm(0.3665)
qnorm(1-0.3665)
pnorm(2.2)
pnorm(1.4)
pnorm(2.2)-pnorm(1.4)
68-64.5
3.5/2.5
pnorm(2.2)-pnorm(1.4)
qnorm(0.9, mean = 98.6, sd = 0.73)
qnorm(0.9)
qnorm(0.9)*0.73 + 98.6
sqrt(2500*0.6*0.4)
20/24.5
1-pnorm(0.82)
1-pbinom(1520)
1-pbinom(1520, size = 2500, p=0.6)
qt(0.025, df=343)
qt(1-0.025, df=343)
76 - 1.9669 * (8.8\sqrt(344))
76 - 1.9669 * (8.8/sqrt(344))
76 + 1.9669 * (8.8/sqrt(344))
pnorm(0.025)
qnorm(0.025)
4.8-1.96*2.2/sqrt(80)
4.8+1.96*2.2/sqrt(80)
qt(0.025, 66)
qt(0.05, 189)
qt(0.05, 39)
pt(-3.73, 113)
pt(-1.650, 39)
pnorm(-5.134)
data1 <- c(501.4, 498.0, 498.6, 499.2, 495.2, 501.4, 509.5, 494.9, 498.6, 497.6,
505.5, 505.1, 499.8, 502.4, 497.0, 504.3, 499.7, 497.9, 496.5, 498.9,
504.9, 503.2, 503.0, 502.6, 496.8, 498.2, 500.1, 497.9, 502.2, 503.2)
?qqplot
qqnorm(y); qqline(y, col = 2)
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
data1 <- c(501.4, 498.0, 498.6, 499.2, 495.2, 501.4, 509.5, 494.9, 498.6, 497.6,
505.5, 505.1, 499.8, 502.4, 497.0, 504.3, 499.7, 497.9, 496.5, 498.9,
504.9, 503.2, 503.0, 502.6, 496.8, 498.2, 500.1, 497.9, 502.2, 503.2)
qqnorm(data1); qqline(data1, col = 2)
y
qqnorm(data1, main = "Q-Q Plot of data1", pch = 19, col = "blue")
qqline(data1, col = "red", lwd = 2)
data1 <- c(501.4, 498.0, 498.6, 499.2, 495.2, 501.4, 509.5, 494.9, 498.6, 497.6,
505.5, 505.1, 499.8, 502.4, 497.0, 504.3, 499.7, 497.9, 496.5, 498.9,
504.9, 503.2, 503.0, 502.6, 496.8, 498.2, 500.1, 497.9, 502.2, 503.2)
qqnorm(data1, main = "Q-Q Plot of data1", pch = 19, col = "blue")
qqline(data1, col = "red", lwd = 2)
?chisq.test
chisq.test(data1)
qchisq(c(.025,.975),df=9, lower.tail=FALSE)
qchisq(c(.025,.975),df=29, lower.tail=FALSE)
install.packages("asbio")
library(asbio)
ci.sigma(data1)
?ci.sigma
ci.sigma(data1, conf = 0.99)
sd(data1)
summary(data1)
qqnorm(data1, main = "Q-Q Plot of data1", pch = 19, col = "blue")
qqline(data1, col = "red", lwd = 2)
data2 <- c(203.1, 184.5, 206.8, 211.0, 218.3, 174.2, 193.2, 201.9, 199.9, 194.3,
199.4, 193.6, 194.6, 187.2, 197.8, 184.3, 196.1, 196.4, 197.5, 187.9)
chisq.test(data2)
?chisq.test
qqnorm(data2, main = "Q-Q Plot of data1", pch = 19, col = "blue")
qqline(data2, col = "red", lwd = 2)
?qqplot
TS <- (length(data2)-1)*sd(data2)^2/5^2
TS
y <- rt(200, df = 5)
qqplot(y, rt(300, df = 5))
length(data2)-1
Pvalue <- 1-pchisq(TS, length(data2)-1)
Pvalue
TS
pnorm(0.05)
1-pnorm(0.5)
5/4
1-pnorm(1.25)
library(randomForest)
?randomForest
setwd("C:/Users/jason/OneDrive/Desktop/Random Forest Project")
sample(4, replace = T)
sample(4, replace = T)
library(missForest)
library(missForest)
?missForest
install.packages("distill")
remotes::install_github("gadenbuuie/cleanrmd")
install.packages("remotes")
remotes::install_github("gadenbuuie/cleanrmd")
remotes::install_github("gadenbuie/cleanrmd")
